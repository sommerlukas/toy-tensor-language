// RUN: ttl-cc %s | FileCheck %s

function int gt(float a, float b){
  return a > b;
}

function int ge(int a, int b){
  return a >= b;
}

function int lt(float a, float b){
  return a < b;
}

function int le(int a, int b){
  return a <= b;
}

function int eq(float a, float b){
  return a == b;
}

function int ne(float a, float b){
  return a != b;
}
// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @gt(
// CHECK-SAME:                  %[[VAL_0:.*]]: !ttl.float,
// CHECK-SAME:                  %[[VAL_1:.*]]: !ttl.float) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.cmp"(%[[VAL_0]], %[[VAL_1]]) <{opcode = 0 : i32}> : (!ttl.float, !ttl.float) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @ge(
// CHECK-SAME:                  %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                  %[[VAL_1:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.cmp"(%[[VAL_0]], %[[VAL_1]]) <{opcode = 2 : i32}> : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @lt(
// CHECK-SAME:                  %[[VAL_0:.*]]: !ttl.float,
// CHECK-SAME:                  %[[VAL_1:.*]]: !ttl.float) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.cmp"(%[[VAL_0]], %[[VAL_1]]) <{opcode = 1 : i32}> : (!ttl.float, !ttl.float) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @le(
// CHECK-SAME:                  %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                  %[[VAL_1:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.cmp"(%[[VAL_0]], %[[VAL_1]]) <{opcode = 3 : i32}> : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @eq(
// CHECK-SAME:                  %[[VAL_0:.*]]: !ttl.float,
// CHECK-SAME:                  %[[VAL_1:.*]]: !ttl.float) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.cmp"(%[[VAL_0]], %[[VAL_1]]) <{opcode = 4 : i32}> : (!ttl.float, !ttl.float) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @ne(
// CHECK-SAME:                  %[[VAL_0:.*]]: !ttl.float,
// CHECK-SAME:                  %[[VAL_1:.*]]: !ttl.float) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.cmp"(%[[VAL_0]], %[[VAL_1]]) <{opcode = 5 : i32}> : (!ttl.float, !ttl.float) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

