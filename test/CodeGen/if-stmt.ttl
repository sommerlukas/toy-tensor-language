// RUN: ttl-cc %s | FileCheck %s

function float control_flow_if(int cond1, int cond2){
  var float a;
  var matrix<float>[2, 2] b;
  var int c = 42;
  var int d = 5;
  var int e = 4;
  if(cond1){
    a = 3.0;
    c = 25;
    if(cond2){
      e = 42;
      a = 5.0;
      b[0,1] = 6.0;
      b[1,0] = 7.0;
    } else {
      b[0,1] = 7.0;
      b[1,1] = 10.0;
    }
    a = 9.0;
  } else {
    a = 8.0;
    d = 8;
  }
  return a + b{1,0}; 
}

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @control_flow_if(
// CHECK-SAME:                               %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                               %[[VAL_1:.*]]: !ttl.int) -> !ttl.float {
// CHECK:           %[[VAL_2:.*]] = "ttl.const_float"() <{constVal = 0.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_3:.*]] = "ttl.tensor_random_init"() : () -> !ttl.tensor<2x2x!ttl.float>
// CHECK:           %[[VAL_4:.*]] = "ttl.const_int"() <{constVal = 42 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_5:.*]] = "ttl.const_int"() <{constVal = 5 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_6:.*]] = "ttl.const_int"() <{constVal = 4 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_7:.*]]:5 = "ttl.if"(%[[VAL_0]]) ({
// CHECK:             %[[VAL_8:.*]] = "ttl.const_float"() <{constVal = 3.000000e+00 : f32}> : () -> !ttl.float
// CHECK:             %[[VAL_9:.*]] = "ttl.const_int"() <{constVal = 25 : i32}> : () -> !ttl.int
// CHECK:             %[[VAL_10:.*]]:3 = "ttl.if"(%[[VAL_1]]) ({
// CHECK:               %[[VAL_11:.*]] = "ttl.const_int"() <{constVal = 42 : i32}> : () -> !ttl.int
// CHECK:               %[[VAL_12:.*]] = "ttl.const_float"() <{constVal = 5.000000e+00 : f32}> : () -> !ttl.float
// CHECK:               %[[VAL_13:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:               %[[VAL_14:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:               %[[VAL_15:.*]] = "ttl.const_float"() <{constVal = 6.000000e+00 : f32}> : () -> !ttl.float
// CHECK:               %[[VAL_16:.*]] = "ttl.tensor_insert"(%[[VAL_3]], %[[VAL_15]], %[[VAL_13]], %[[VAL_14]]) : (!ttl.tensor<2x2x!ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<2x2x!ttl.float>
// CHECK:               %[[VAL_17:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:               %[[VAL_18:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:               %[[VAL_19:.*]] = "ttl.const_float"() <{constVal = 7.000000e+00 : f32}> : () -> !ttl.float
// CHECK:               %[[VAL_20:.*]] = "ttl.tensor_insert"(%[[VAL_16]], %[[VAL_19]], %[[VAL_17]], %[[VAL_18]]) : (!ttl.tensor<2x2x!ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<2x2x!ttl.float>
// CHECK:               "ttl.yield"(%[[VAL_11]], %[[VAL_12]], %[[VAL_20]]) : (!ttl.int, !ttl.float, !ttl.tensor<2x2x!ttl.float>) -> ()
// CHECK:             }, {
// CHECK:               %[[VAL_21:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:               %[[VAL_22:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:               %[[VAL_23:.*]] = "ttl.const_float"() <{constVal = 7.000000e+00 : f32}> : () -> !ttl.float
// CHECK:               %[[VAL_24:.*]] = "ttl.tensor_insert"(%[[VAL_3]], %[[VAL_23]], %[[VAL_21]], %[[VAL_22]]) : (!ttl.tensor<2x2x!ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<2x2x!ttl.float>
// CHECK:               %[[VAL_25:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:               %[[VAL_26:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:               %[[VAL_27:.*]] = "ttl.const_float"() <{constVal = 1.000000e+01 : f32}> : () -> !ttl.float
// CHECK:               %[[VAL_28:.*]] = "ttl.tensor_insert"(%[[VAL_24]], %[[VAL_27]], %[[VAL_25]], %[[VAL_26]]) : (!ttl.tensor<2x2x!ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<2x2x!ttl.float>
// CHECK:               "ttl.yield"(%[[VAL_6]], %[[VAL_8]], %[[VAL_28]]) : (!ttl.int, !ttl.float, !ttl.tensor<2x2x!ttl.float>) -> ()
// CHECK:             }) : (!ttl.int) -> (!ttl.int, !ttl.float, !ttl.tensor<2x2x!ttl.float>)
// CHECK:             %[[VAL_29:.*]] = "ttl.const_float"() <{constVal = 9.000000e+00 : f32}> : () -> !ttl.float
// CHECK:             "ttl.yield"(%[[VAL_29]], %[[VAL_9]], %[[VAL_30:.*]]#0, %[[VAL_30]]#2, %[[VAL_5]]) : (!ttl.float, !ttl.int, !ttl.int, !ttl.tensor<2x2x!ttl.float>, !ttl.int) -> ()
// CHECK:           }, {
// CHECK:             %[[VAL_31:.*]] = "ttl.const_float"() <{constVal = 8.000000e+00 : f32}> : () -> !ttl.float
// CHECK:             %[[VAL_32:.*]] = "ttl.const_int"() <{constVal = 8 : i32}> : () -> !ttl.int
// CHECK:             "ttl.yield"(%[[VAL_31]], %[[VAL_4]], %[[VAL_6]], %[[VAL_3]], %[[VAL_32]]) : (!ttl.float, !ttl.int, !ttl.int, !ttl.tensor<2x2x!ttl.float>, !ttl.int) -> ()
// CHECK:           }) : (!ttl.int) -> (!ttl.float, !ttl.int, !ttl.int, !ttl.tensor<2x2x!ttl.float>, !ttl.int)
// CHECK:           %[[VAL_33:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_34:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_35:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_36:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_37:.*]] = "ttl.slice"(%[[VAL_38:.*]]#3, %[[VAL_33]], %[[VAL_35]], %[[VAL_34]], %[[VAL_36]]) : (!ttl.tensor<2x2x!ttl.float>, !ttl.int, !ttl.int, !ttl.int, !ttl.int) -> !ttl.float
// CHECK:           %[[VAL_39:.*]] = "ttl.add"(%[[VAL_38]]#0, %[[VAL_37]]) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           "ttl.return"(%[[VAL_39]]) : (!ttl.float) -> ()
// CHECK:         }

