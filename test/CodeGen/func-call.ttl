// RUN: ttl-cc %s | FileCheck %s

function float callee(matrix<float>[?] a, int b, float c){
  var float d = a{b} * c;
  return d;
}

function float caller(matrix<float>[?] a){
  var int b = 5;
  var float c = 42.0;
  return callee(a, b, c);
}
// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @callee(
// CHECK-SAME:                      %[[VAL_0:.*]]: !ttl.tensor<?x!ttl.float>,
// CHECK-SAME:                      %[[VAL_1:.*]]: !ttl.int,
// CHECK-SAME:                      %[[VAL_2:.*]]: !ttl.float) -> !ttl.float {
// CHECK:           %[[VAL_3:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_4:.*]] = "ttl.slice"(%[[VAL_0]], %[[VAL_1]], %[[VAL_3]]) : (!ttl.tensor<?x!ttl.float>, !ttl.int, !ttl.int) -> !ttl.float
// CHECK:           %[[VAL_5:.*]] = "ttl.mul"(%[[VAL_4]], %[[VAL_2]]) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           "ttl.return"(%[[VAL_5]]) : (!ttl.float) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @caller(
// CHECK-SAME:                      %[[VAL_0:.*]]: !ttl.tensor<?x!ttl.float>) -> !ttl.float {
// CHECK:           %[[VAL_1:.*]] = "ttl.const_int"() <{constVal = 5 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_2:.*]] = "ttl.const_float"() <{constVal = 4.200000e+01 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_3:.*]] = call @callee(%[[VAL_0]], %[[VAL_1]], %[[VAL_2]]) : (!ttl.tensor<?x!ttl.float>, !ttl.int, !ttl.float) -> !ttl.float
// CHECK:           "ttl.return"(%[[VAL_3]]) : (!ttl.float) -> ()
// CHECK:         }

