// RUN: ttl-cc %s | FileCheck %s

function float control_flow_if(int cond1, int start1, int end1, int num){
  var matrix<float>[8, 8] a;
  var matrix<float>[8] b;
  var float c = 5.0;
  var float d = 6.0;
  var float e = 8.0;
  var float f = 1.0;
  var int i1;
  var int i2;
  for(i1 in start1...end1 by 1){
    c = 8.0;
    d = 7.0;
    for(i2 in num by 2){
      if(cond1){
        e = 42.0;
      }
      a[i1, i2] = c;
    }
    b[i1] = d;
  }
  return a{0, 1} * b{2} * c * d * e * f;
}
// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   "func.func"() <{function_type = (!ttl.int, !ttl.int, !ttl.int, !ttl.int) -> !ttl.float, sym_name = "control_flow_if"}> ({
// CHECK:         ^bb0(%[[VAL_0:.*]]: !ttl.int, %[[VAL_1:.*]]: !ttl.int, %[[VAL_2:.*]]: !ttl.int, %[[VAL_3:.*]]: !ttl.int):
// CHECK:           %[[VAL_4:.*]] = "ttl.const_float"() <{constVal = 0.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_5:.*]] = "ttl.tensor_scalar_init"(%[[VAL_4]]) : (!ttl.float) -> !ttl.tensor<8x8 x !ttl.float>
// CHECK:           %[[VAL_6:.*]] = "ttl.const_float"() <{constVal = 0.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_7:.*]] = "ttl.tensor_scalar_init"(%[[VAL_6]]) : (!ttl.float) -> !ttl.tensor<8 x !ttl.float>
// CHECK:           %[[VAL_8:.*]] = "ttl.const_float"() <{constVal = 5.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_9:.*]] = "ttl.const_float"() <{constVal = 6.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_10:.*]] = "ttl.const_float"() <{constVal = 8.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_11:.*]] = "ttl.const_float"() <{constVal = 1.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_12:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_13:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_14:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_15:.*]]:5 = "scf.for"(%[[VAL_1]], %[[VAL_2]], %[[VAL_14]], %[[VAL_8]], %[[VAL_9]], %[[VAL_10]], %[[VAL_5]], %[[VAL_7]]) ({
// CHECK:           ^bb0(%[[VAL_16:.*]]: !ttl.int, %[[VAL_17:.*]]: !ttl.float, %[[VAL_18:.*]]: !ttl.float, %[[VAL_19:.*]]: !ttl.float, %[[VAL_20:.*]]: !ttl.tensor<8x8 x !ttl.float>, %[[VAL_21:.*]]: !ttl.tensor<8 x !ttl.float>):
// CHECK:             %[[VAL_22:.*]] = "ttl.const_float"() <{constVal = 8.000000e+00 : f32}> : () -> !ttl.float
// CHECK:             %[[VAL_23:.*]] = "ttl.const_float"() <{constVal = 7.000000e+00 : f32}> : () -> !ttl.float
// CHECK:             %[[VAL_24:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:             %[[VAL_25:.*]] = "ttl.const_int"() <{constVal = 2 : i32}> : () -> !ttl.int
// CHECK:             %[[VAL_26:.*]]:2 = "scf.for"(%[[VAL_24]], %[[VAL_3]], %[[VAL_25]], %[[VAL_19]], %[[VAL_20]]) ({
// CHECK:             ^bb0(%[[VAL_27:.*]]: !ttl.int, %[[VAL_28:.*]]: !ttl.float, %[[VAL_29:.*]]: !ttl.tensor<8x8 x !ttl.float>):
// CHECK:               %[[VAL_30:.*]] = "ttl.if"(%[[VAL_0]]) ({
// CHECK:                 %[[VAL_31:.*]] = "ttl.const_float"() <{constVal = 4.200000e+01 : f32}> : () -> !ttl.float
// CHECK:                 "ttl.yield"(%[[VAL_31]]) : (!ttl.float) -> ()
// CHECK:               }, {
// CHECK:               }) : (!ttl.int) -> !ttl.float
// CHECK:               %[[VAL_32:.*]] = "ttl.tensor_insert"(%[[VAL_29]], %[[VAL_22]], %[[VAL_16]], %[[VAL_27]]) : (!ttl.tensor<8x8 x !ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<8x8 x !ttl.float>
// CHECK:               "scf.yield"(%[[VAL_30]], %[[VAL_32]]) : (!ttl.float, !ttl.tensor<8x8 x !ttl.float>) -> ()
// CHECK:             }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.float, !ttl.tensor<8x8 x !ttl.float>) -> (!ttl.float, !ttl.tensor<8x8 x !ttl.float>)
// CHECK:             %[[VAL_33:.*]] = "ttl.tensor_insert"(%[[VAL_21]], %[[VAL_23]], %[[VAL_16]]) : (!ttl.tensor<8 x !ttl.float>, !ttl.float, !ttl.int) -> !ttl.tensor<8 x !ttl.float>
// CHECK:             "scf.yield"(%[[VAL_22]], %[[VAL_23]], %[[VAL_34:.*]]#0, %[[VAL_34]]#1, %[[VAL_33]]) : (!ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8 x !ttl.float>, !ttl.tensor<8 x !ttl.float>) -> ()
// CHECK:           }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8 x !ttl.float>, !ttl.tensor<8 x !ttl.float>) -> (!ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8 x !ttl.float>, !ttl.tensor<8 x !ttl.float>)
// CHECK:           %[[VAL_35:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_36:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_37:.*]] = "ttl.slice"(%[[VAL_38:.*]]#3, %[[VAL_35]], %[[VAL_36]]) : (!ttl.tensor<8x8 x !ttl.float>, !ttl.int, !ttl.int) -> !ttl.float
// CHECK:           %[[VAL_39:.*]] = "ttl.const_int"() <{constVal = 2 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_40:.*]] = "ttl.slice"(%[[VAL_38]]#4, %[[VAL_39]]) : (!ttl.tensor<8 x !ttl.float>, !ttl.int) -> !ttl.float
// CHECK:           %[[VAL_41:.*]] = "ttl.mul"(%[[VAL_37]], %[[VAL_40]]) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_42:.*]] = "ttl.mul"(%[[VAL_41]], %[[VAL_38]]#0) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_43:.*]] = "ttl.mul"(%[[VAL_42]], %[[VAL_38]]#1) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_44:.*]] = "ttl.mul"(%[[VAL_43]], %[[VAL_38]]#2) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_45:.*]] = "ttl.mul"(%[[VAL_44]], %[[VAL_11]]) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           "ttl.return"(%[[VAL_45]]) : (!ttl.float) -> ()
// CHECK:         }) : () -> ()

