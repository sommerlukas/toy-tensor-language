// RUN: ttl-cc %s | FileCheck %s

function float control_flow_if(int cond1, int start1, int end1, int num){
  var matrix<float>[8, 8] a;
  var matrix<float>[8] b;
  var float c = 5.0;
  var float d = 6.0;
  var float e = 8.0;
  var float f = 1.0;
  var int i1;
  var int i2;
  for(i1 in start1...end1 by 1){
    c = 8.0;
    d = 7.0;
    for(i2 in num by 2){
      if(cond1){
        e = 42.0;
      }
      a[i1, i2] = c;
    }
    b[i1] = d;
  }
  return a{0, 1} * b{2} * c * d * e * f;
}
// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @control_flow_if(
// CHECK-SAME:      %[[VAL_0:.*]]: !ttl.int, %[[VAL_1:.*]]: !ttl.int, %[[VAL_2:.*]]: !ttl.int, %[[VAL_3:.*]]: !ttl.int) -> !ttl.float {
// CHECK:           %[[VAL_4:.*]] = "ttl.tensor_empty"() : () -> !ttl.tensor<8x8x!ttl.float>
// CHECK:           %[[VAL_5:.*]] = "ttl.tensor_empty"() : () -> !ttl.tensor<8x!ttl.float>
// CHECK:           %[[VAL_6:.*]] = "ttl.const_float"() <{constVal = 5.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_7:.*]] = "ttl.const_float"() <{constVal = 6.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_8:.*]] = "ttl.const_float"() <{constVal = 8.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_9:.*]] = "ttl.const_float"() <{constVal = 1.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_10:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_11:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_12:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_13:.*]]:5 = "ttl.for"(%[[VAL_1]], %[[VAL_2]], %[[VAL_12]], %[[VAL_6]], %[[VAL_7]], %[[VAL_8]], %[[VAL_4]], %[[VAL_5]]) ({
// CHECK:           ^bb0(%[[VAL_14:.*]]: !ttl.int, %[[VAL_15:.*]]: !ttl.float, %[[VAL_16:.*]]: !ttl.float, %[[VAL_17:.*]]: !ttl.float, %[[VAL_18:.*]]: !ttl.tensor<8x8x!ttl.float>, %[[VAL_19:.*]]: !ttl.tensor<8x!ttl.float>):
// CHECK:             %[[VAL_20:.*]] = "ttl.const_float"() <{constVal = 8.000000e+00 : f32}> : () -> !ttl.float
// CHECK:             %[[VAL_21:.*]] = "ttl.const_float"() <{constVal = 7.000000e+00 : f32}> : () -> !ttl.float
// CHECK:             %[[VAL_22:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:             %[[VAL_23:.*]] = "ttl.const_int"() <{constVal = 2 : i32}> : () -> !ttl.int
// CHECK:             %[[VAL_24:.*]]:2 = "ttl.for"(%[[VAL_22]], %[[VAL_3]], %[[VAL_23]], %[[VAL_17]], %[[VAL_18]]) ({
// CHECK:             ^bb0(%[[VAL_25:.*]]: !ttl.int, %[[VAL_26:.*]]: !ttl.float, %[[VAL_27:.*]]: !ttl.tensor<8x8x!ttl.float>):
// CHECK:               %[[VAL_28:.*]] = "ttl.if"(%[[VAL_0]]) ({
// CHECK:                 %[[VAL_29:.*]] = "ttl.const_float"() <{constVal = 4.200000e+01 : f32}> : () -> !ttl.float
// CHECK:                 "ttl.yield"(%[[VAL_29]]) : (!ttl.float) -> ()
// CHECK:               }, {
// CHECK:               }) : (!ttl.int) -> !ttl.float
// CHECK:               %[[VAL_30:.*]] = "ttl.tensor_insert"(%[[VAL_27]], %[[VAL_20]], %[[VAL_14]], %[[VAL_25]]) : (!ttl.tensor<8x8x!ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<8x8x!ttl.float>
// CHECK:               "ttl.yield"(%[[VAL_28]], %[[VAL_30]]) : (!ttl.float, !ttl.tensor<8x8x!ttl.float>) -> ()
// CHECK:             }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.float, !ttl.tensor<8x8x!ttl.float>) -> (!ttl.float, !ttl.tensor<8x8x!ttl.float>)
// CHECK:             %[[VAL_31:.*]] = "ttl.tensor_insert"(%[[VAL_19]], %[[VAL_21]], %[[VAL_14]]) : (!ttl.tensor<8x!ttl.float>, !ttl.float, !ttl.int) -> !ttl.tensor<8x!ttl.float>
// CHECK:             "ttl.yield"(%[[VAL_20]], %[[VAL_21]], %[[VAL_32:.*]]#0, %[[VAL_32]]#1, %[[VAL_31]]) : (!ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8x!ttl.float>, !ttl.tensor<8x!ttl.float>) -> ()
// CHECK:           }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8x!ttl.float>, !ttl.tensor<8x!ttl.float>) -> (!ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8x!ttl.float>, !ttl.tensor<8x!ttl.float>)
// CHECK:           %[[VAL_33:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_34:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_35:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_36:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_37:.*]] = "ttl.slice"(%[[VAL_38:.*]]#3, %[[VAL_33]], %[[VAL_35]], %[[VAL_34]], %[[VAL_36]]) : (!ttl.tensor<8x8x!ttl.float>, !ttl.int, !ttl.int, !ttl.int, !ttl.int) -> !ttl.float
// CHECK:           %[[VAL_39:.*]] = "ttl.const_int"() <{constVal = 2 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_40:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_41:.*]] = "ttl.slice"(%[[VAL_38]]#4, %[[VAL_39]], %[[VAL_40]]) : (!ttl.tensor<8x!ttl.float>, !ttl.int, !ttl.int) -> !ttl.float
// CHECK:           %[[VAL_42:.*]] = "ttl.mul"(%[[VAL_37]], %[[VAL_41]]) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_43:.*]] = "ttl.mul"(%[[VAL_42]], %[[VAL_38]]#0) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_44:.*]] = "ttl.mul"(%[[VAL_43]], %[[VAL_38]]#1) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_45:.*]] = "ttl.mul"(%[[VAL_44]], %[[VAL_38]]#2) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_46:.*]] = "ttl.mul"(%[[VAL_45]], %[[VAL_9]]) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           "ttl.return"(%[[VAL_46]]) : (!ttl.float) -> ()
// CHECK:         }
