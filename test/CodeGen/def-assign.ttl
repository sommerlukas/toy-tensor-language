// RUN: ttl-cc %s | FileCheck %s

function int int_val_init(){
  var int a = 5;
  return a;
}

function int int_zero_init(){
  var int b;
  return b;
}

function float float_val_init(){
  var float a = 42.0;
  return a;
}

function float float_zero_init(){
  var float b;
  return b;
}

function matrix<int>[?, ?] matrix_zero_init(){
  var matrix<int>[?, ?] a;
  return a;
}

function matrix<float>[?, ?] matrix_scalar_init(){
  var matrix<float>[?, ?] a = 42.0;
  return a;
}

function matrix<int>[4, 4] matrix_range_init(){
  var matrix<int>[4, 4] a = 1...17;
  return a;
}

function int scalar_param_assign(int a, int b){
  a = b;
  return a;
}

function int scalar_var_assign(int a){
  var int b = 5;
  b = a;
  return b;
}

function matrix<float>[2,2] fixed_matrix_elem_assign(float a){
  var matrix<float>[2,2] b = 25.0;
  b[0,1] = a;
  return b;
}

function matrix<float>[2,2] dyn_matrix_elem_assign(float a, int b, int c){
  var matrix<float>[2,2] d = 25.0;
  d[b, c] = a;
  return d;
}
// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @int_val_init() -> !ttl.int {
// CHECK:           %[[VAL_0:.*]] = "ttl.const_int"() <{constVal = 5 : i32}> : () -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_0]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @int_zero_init() -> !ttl.int {
// CHECK:           %[[VAL_0:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_0]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @float_val_init() -> !ttl.float {
// CHECK:           %[[VAL_0:.*]] = "ttl.const_float"() <{constVal = 4.200000e+01 : f32}> : () -> !ttl.float
// CHECK:           "ttl.return"(%[[VAL_0]]) : (!ttl.float) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @float_zero_init() -> !ttl.float {
// CHECK:           %[[VAL_0:.*]] = "ttl.const_float"() <{constVal = 0.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           "ttl.return"(%[[VAL_0]]) : (!ttl.float) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @matrix_zero_init() -> !ttl.tensor<?x? x !ttl.int> {
// CHECK:           %[[VAL_0:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_1:.*]] = "ttl.tensor_scalar_init"(%[[VAL_0]]) : (!ttl.int) -> !ttl.tensor<?x? x !ttl.int>
// CHECK:           "ttl.return"(%[[VAL_1]]) : (!ttl.tensor<?x? x !ttl.int>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @matrix_scalar_init() -> !ttl.tensor<?x? x !ttl.float> {
// CHECK:           %[[VAL_0:.*]] = "ttl.const_float"() <{constVal = 4.200000e+01 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_1:.*]] = "ttl.tensor_scalar_init"(%[[VAL_0]]) : (!ttl.float) -> !ttl.tensor<?x? x !ttl.float>
// CHECK:           "ttl.return"(%[[VAL_1]]) : (!ttl.tensor<?x? x !ttl.float>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @matrix_range_init() -> !ttl.tensor<4x4 x !ttl.int> {
// CHECK:           %[[VAL_0:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_1:.*]] = "ttl.const_int"() <{constVal = 17 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_2:.*]] = ttl.range %[[VAL_0]] : %[[VAL_1]]
// CHECK:           %[[VAL_3:.*]] = "ttl.tensor_range_init"(%[[VAL_2]]) : (!ttl.range) -> !ttl.tensor<4x4 x !ttl.int>
// CHECK:           "ttl.return"(%[[VAL_3]]) : (!ttl.tensor<4x4 x !ttl.int>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @scalar_param_assign(
// CHECK-SAME:                                   %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                                   %[[VAL_1:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           "ttl.return"(%[[VAL_1]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @scalar_var_assign(
// CHECK-SAME:                                 %[[VAL_0:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_1:.*]] = "ttl.const_int"() <{constVal = 5 : i32}> : () -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_0]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @fixed_matrix_elem_assign(
// CHECK-SAME:                                        %[[VAL_0:.*]]: !ttl.float) -> !ttl.tensor<2x2 x !ttl.float> {
// CHECK:           %[[VAL_1:.*]] = "ttl.const_float"() <{constVal = 2.500000e+01 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_2:.*]] = "ttl.tensor_scalar_init"(%[[VAL_1]]) : (!ttl.float) -> !ttl.tensor<2x2 x !ttl.float>
// CHECK:           %[[VAL_3:.*]] = "ttl.const_int"() <{constVal = 0 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_4:.*]] = "ttl.const_int"() <{constVal = 1 : i32}> : () -> !ttl.int
// CHECK:           %[[VAL_5:.*]] = "ttl.tensor_insert"(%[[VAL_2]], %[[VAL_0]], %[[VAL_3]], %[[VAL_4]]) : (!ttl.tensor<2x2 x !ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<2x2 x !ttl.float>
// CHECK:           "ttl.return"(%[[VAL_5]]) : (!ttl.tensor<2x2 x !ttl.float>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @dyn_matrix_elem_assign(
// CHECK-SAME:                                      %[[VAL_0:.*]]: !ttl.float,
// CHECK-SAME:                                      %[[VAL_1:.*]]: !ttl.int,
// CHECK-SAME:                                      %[[VAL_2:.*]]: !ttl.int) -> !ttl.tensor<2x2 x !ttl.float> {
// CHECK:           %[[VAL_3:.*]] = "ttl.const_float"() <{constVal = 2.500000e+01 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_4:.*]] = "ttl.tensor_scalar_init"(%[[VAL_3]]) : (!ttl.float) -> !ttl.tensor<2x2 x !ttl.float>
// CHECK:           %[[VAL_5:.*]] = "ttl.tensor_insert"(%[[VAL_4]], %[[VAL_0]], %[[VAL_1]], %[[VAL_2]]) : (!ttl.tensor<2x2 x !ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<2x2 x !ttl.float>
// CHECK:           "ttl.return"(%[[VAL_5]]) : (!ttl.tensor<2x2 x !ttl.float>) -> ()
// CHECK:         }

