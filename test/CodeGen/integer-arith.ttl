// RUN: ttl-cc %s | FileCheck %s

function int add(int a, int b){
  var int c = a + b;
  return c;
} 

function int sub(int a, int b){
  var int c = a - b;
  return c;
}

function int mul(int a, int b){
  var int c = a * b;
  return c;
}

function int div(int a, int b){
  var int c = a / b;
  return c;
}

function int and(int a, int b){
  var int c = a & b;
  return c;
}

function int or(int a, int b){
  var int c = a | b;
  return c;
}

function int minus(int a){
  var int b = -a;
  return b;
}

function int not(int a){
  var int b = !a;
  return b;
}
// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @add(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                   %[[VAL_1:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.add"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @sub(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                   %[[VAL_1:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.sub"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @mul(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                   %[[VAL_1:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.mul"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @div(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                   %[[VAL_1:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.div"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @and(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                   %[[VAL_1:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.and"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @or(
// CHECK-SAME:                  %[[VAL_0:.*]]: !ttl.int,
// CHECK-SAME:                  %[[VAL_1:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_2:.*]] = "ttl.or"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @minus(
// CHECK-SAME:                     %[[VAL_0:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_1:.*]] = "ttl.minus"(%[[VAL_0]]) : (!ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_1]]) : (!ttl.int) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @not(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_1:.*]] = "ttl.not"(%[[VAL_0]]) : (!ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_1]]) : (!ttl.int) -> ()
// CHECK:         }

