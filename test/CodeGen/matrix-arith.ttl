// RUN: ttl-cc %s | FileCheck %s

function matrix<int>[4,4] add(matrix<int>[4,4] a, matrix<int>[4,4] b){
  var matrix<int>[4,4] c = a + b;
  return c;
} 

function matrix<int>[4,4] sub(matrix<int>[4,4] a, matrix<int>[4,4] b){
  var matrix<int>[4,4] c = a - b;
  return c;
}

function matrix<int>[4,4] mul(matrix<int>[4,4] a, matrix<int>[4,4] b){
  var matrix<int>[4,4] c = a * b;
  return c;
}

function matrix<int>[4,4] div(matrix<int>[4,4] a, matrix<int>[4,4] b){
  var matrix<int>[4,4] c = a / b;
  return c;
}

function matrix<int>[?,?] add_dyn(matrix<int>[?,?] a, matrix<int>[?,?] b){
  var matrix<int>[?,?] c = a + b;
  return c;
} 

function matrix<int>[?,?] sub_dyn(matrix<int>[?,?] a, matrix<int>[?,?] b){
  var matrix<int>[?,?] c = a - b;
  return c;
}

function matrix<int>[?,?] mul_dyn(matrix<int>[?,?] a, matrix<int>[?,?] b){
  var matrix<int>[?,?] c = a * b;
  return c;
}

function matrix<int>[?,?] div_dyn(matrix<int>[?,?] a, matrix<int>[?,?] b){
  var matrix<int>[?,?] c = a / b;
  return c;
}

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @add(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.tensor<4x4x!ttl.int>,
// CHECK-SAME:                   %[[VAL_1:.*]]: !ttl.tensor<4x4x!ttl.int>) -> !ttl.tensor<4x4x!ttl.int> {
// CHECK:           %[[VAL_2:.*]] = "ttl.add"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.tensor<4x4x!ttl.int>, !ttl.tensor<4x4x!ttl.int>) -> !ttl.tensor<4x4x!ttl.int>
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.tensor<4x4x!ttl.int>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @sub(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.tensor<4x4x!ttl.int>,
// CHECK-SAME:                   %[[VAL_1:.*]]: !ttl.tensor<4x4x!ttl.int>) -> !ttl.tensor<4x4x!ttl.int> {
// CHECK:           %[[VAL_2:.*]] = "ttl.sub"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.tensor<4x4x!ttl.int>, !ttl.tensor<4x4x!ttl.int>) -> !ttl.tensor<4x4x!ttl.int>
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.tensor<4x4x!ttl.int>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @mul(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.tensor<4x4x!ttl.int>,
// CHECK-SAME:                   %[[VAL_1:.*]]: !ttl.tensor<4x4x!ttl.int>) -> !ttl.tensor<4x4x!ttl.int> {
// CHECK:           %[[VAL_2:.*]] = "ttl.mul"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.tensor<4x4x!ttl.int>, !ttl.tensor<4x4x!ttl.int>) -> !ttl.tensor<4x4x!ttl.int>
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.tensor<4x4x!ttl.int>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @div(
// CHECK-SAME:                   %[[VAL_0:.*]]: !ttl.tensor<4x4x!ttl.int>,
// CHECK-SAME:                   %[[VAL_1:.*]]: !ttl.tensor<4x4x!ttl.int>) -> !ttl.tensor<4x4x!ttl.int> {
// CHECK:           %[[VAL_2:.*]] = "ttl.div"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.tensor<4x4x!ttl.int>, !ttl.tensor<4x4x!ttl.int>) -> !ttl.tensor<4x4x!ttl.int>
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.tensor<4x4x!ttl.int>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @add_dyn(
// CHECK-SAME:                       %[[VAL_0:.*]]: !ttl.tensor<?x?x!ttl.int>,
// CHECK-SAME:                       %[[VAL_1:.*]]: !ttl.tensor<?x?x!ttl.int>) -> !ttl.tensor<?x?x!ttl.int> {
// CHECK:           %[[VAL_2:.*]] = "ttl.add"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.tensor<?x?x!ttl.int>, !ttl.tensor<?x?x!ttl.int>) -> !ttl.tensor<?x?x!ttl.int>
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.tensor<?x?x!ttl.int>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @sub_dyn(
// CHECK-SAME:                       %[[VAL_0:.*]]: !ttl.tensor<?x?x!ttl.int>,
// CHECK-SAME:                       %[[VAL_1:.*]]: !ttl.tensor<?x?x!ttl.int>) -> !ttl.tensor<?x?x!ttl.int> {
// CHECK:           %[[VAL_2:.*]] = "ttl.sub"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.tensor<?x?x!ttl.int>, !ttl.tensor<?x?x!ttl.int>) -> !ttl.tensor<?x?x!ttl.int>
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.tensor<?x?x!ttl.int>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @mul_dyn(
// CHECK-SAME:                       %[[VAL_0:.*]]: !ttl.tensor<?x?x!ttl.int>,
// CHECK-SAME:                       %[[VAL_1:.*]]: !ttl.tensor<?x?x!ttl.int>) -> !ttl.tensor<?x?x!ttl.int> {
// CHECK:           %[[VAL_2:.*]] = "ttl.mul"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.tensor<?x?x!ttl.int>, !ttl.tensor<?x?x!ttl.int>) -> !ttl.tensor<?x?x!ttl.int>
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.tensor<?x?x!ttl.int>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @div_dyn(
// CHECK-SAME:                       %[[VAL_0:.*]]: !ttl.tensor<?x?x!ttl.int>,
// CHECK-SAME:                       %[[VAL_1:.*]]: !ttl.tensor<?x?x!ttl.int>) -> !ttl.tensor<?x?x!ttl.int> {
// CHECK:           %[[VAL_2:.*]] = "ttl.div"(%[[VAL_0]], %[[VAL_1]]) : (!ttl.tensor<?x?x!ttl.int>, !ttl.tensor<?x?x!ttl.int>) -> !ttl.tensor<?x?x!ttl.int>
// CHECK:           "ttl.return"(%[[VAL_2]]) : (!ttl.tensor<?x?x!ttl.int>) -> ()
// CHECK:         }

