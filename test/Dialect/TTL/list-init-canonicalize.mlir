// RUN: ttl-opt --canonicalize %s | FileCheck %s

module {
  func.func @list_init() -> !ttl.tensor<2x2x!ttl.float> {
    %0 = "ttl.const_float"() <{constVal = 2.000000e+00 : f32}> : () -> !ttl.float
    %1 = "ttl.const_float"() <{constVal = 5.000000e+00 : f32}> : () -> !ttl.float
    %2 = "ttl.const_float"() <{constVal = 5.700000e+00 : f32}> : () -> !ttl.float
    %3 = "ttl.const_float"() <{constVal = 9.300000e+00 : f32}> : () -> !ttl.float
    %4 = "ttl.tensor_list_init"(%0, %1, %2, %3) : (!ttl.float, !ttl.float, !ttl.float, !ttl.float) -> !ttl.tensor<2x2x!ttl.float>
    "ttl.return"(%4) : (!ttl.tensor<2x2x!ttl.float>) -> ()
  }

  func.func @list_init_2() -> !ttl.tensor<2x2x!ttl.float> {
    %0 = "ttl.const_float"() <{constVal = 2.000000e+00 : f32}> : () -> !ttl.float
    %1 = "ttl.tensor_list_init"(%0, %0, %0, %0) : (!ttl.float, !ttl.float, !ttl.float, !ttl.float) -> !ttl.tensor<2x2x!ttl.float>
    "ttl.return"(%1) : (!ttl.tensor<2x2x!ttl.float>) -> ()
  }

  func.func @list_init_3(%arg : !ttl.float) -> !ttl.tensor<2x2x!ttl.float> {
    %0 = "ttl.tensor_list_init"(%arg, %arg, %arg, %arg) : (!ttl.float, !ttl.float, !ttl.float, !ttl.float) -> !ttl.tensor<2x2x!ttl.float>
    "ttl.return"(%0) : (!ttl.tensor<2x2x!ttl.float>) -> ()
  }
}

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @list_init() -> !ttl.tensor<2x2x!ttl.float> {
// CHECK:           %[[VAL_0:.*]] = "ttl.const_float"() <{constVal = 2.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_1:.*]] = "ttl.const_float"() <{constVal = 5.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_2:.*]] = "ttl.const_float"() <{constVal = 5.700000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_3:.*]] = "ttl.const_float"() <{constVal = 9.300000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_4:.*]] = "ttl.tensor_list_init"(%[[VAL_0]], %[[VAL_1]], %[[VAL_2]], %[[VAL_3]]) : (!ttl.float, !ttl.float, !ttl.float, !ttl.float) -> !ttl.tensor<2x2x!ttl.float>
// CHECK:           "ttl.return"(%[[VAL_4]]) : (!ttl.tensor<2x2x!ttl.float>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @list_init_2() -> !ttl.tensor<2x2x!ttl.float> {
// CHECK:           %[[VAL_0:.*]] = "ttl.const_float"() <{constVal = 2.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_1:.*]] = "ttl.tensor_scalar_init"(%[[VAL_0]]) : (!ttl.float) -> !ttl.tensor<2x2x!ttl.float>
// CHECK:           "ttl.return"(%[[VAL_1]]) : (!ttl.tensor<2x2x!ttl.float>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @list_init_3(
// CHECK-SAME:                           %[[VAL_0:.*]]: !ttl.float) -> !ttl.tensor<2x2x!ttl.float> {
// CHECK:           %[[VAL_1:.*]] = "ttl.tensor_scalar_init"(%[[VAL_0]]) : (!ttl.float) -> !ttl.tensor<2x2x!ttl.float>
// CHECK:           "ttl.return"(%[[VAL_1]]) : (!ttl.tensor<2x2x!ttl.float>) -> ()
// CHECK:         }
