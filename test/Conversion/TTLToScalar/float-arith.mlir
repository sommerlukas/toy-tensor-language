// RUN: ttl-opt --convert-ttl-to-scalar %s | FileCheck %s

module {
  func.func @add(%arg0: !ttl.float, %arg1: !ttl.float) -> !ttl.float {
    %0 = "ttl.add"(%arg0, %arg1) : (!ttl.float, !ttl.float) -> !ttl.float
    "ttl.return"(%0) : (!ttl.float) -> ()
  }
  func.func @sub(%arg0: !ttl.float, %arg1: !ttl.float) -> !ttl.float {
    %0 = "ttl.sub"(%arg0, %arg1) : (!ttl.float, !ttl.float) -> !ttl.float
    "ttl.return"(%0) : (!ttl.float) -> ()
  }
  func.func @mul(%arg0: !ttl.float, %arg1: !ttl.float) -> !ttl.float {
    %0 = "ttl.mul"(%arg0, %arg1) : (!ttl.float, !ttl.float) -> !ttl.float
    "ttl.return"(%0) : (!ttl.float) -> ()
  }
  func.func @div(%arg0: !ttl.float, %arg1: !ttl.float) -> !ttl.float {
    %0 = "ttl.div"(%arg0, %arg1) : (!ttl.float, !ttl.float) -> !ttl.float
    "ttl.return"(%0) : (!ttl.float) -> ()
  }
  func.func @minus(%arg0: !ttl.float) -> !ttl.float {
    %0 = "ttl.minus"(%arg0) : (!ttl.float) -> !ttl.float
    "ttl.return"(%0) : (!ttl.float) -> ()
  }
}

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @add(
// CHECK-SAME:                   %[[VAL_0:.*]]: f32,
// CHECK-SAME:                   %[[VAL_1:.*]]: f32) -> f32 {
// CHECK:           %[[VAL_2:.*]] = arith.addf %[[VAL_0]], %[[VAL_1]] : f32
// CHECK:           return %[[VAL_2]] : f32
// CHECK:         }

// CHECK-LABEL:   func.func @sub(
// CHECK-SAME:                   %[[VAL_0:.*]]: f32,
// CHECK-SAME:                   %[[VAL_1:.*]]: f32) -> f32 {
// CHECK:           %[[VAL_2:.*]] = arith.subf %[[VAL_0]], %[[VAL_1]] : f32
// CHECK:           return %[[VAL_2]] : f32
// CHECK:         }

// CHECK-LABEL:   func.func @mul(
// CHECK-SAME:                   %[[VAL_0:.*]]: f32,
// CHECK-SAME:                   %[[VAL_1:.*]]: f32) -> f32 {
// CHECK:           %[[VAL_2:.*]] = arith.mulf %[[VAL_0]], %[[VAL_1]] : f32
// CHECK:           return %[[VAL_2]] : f32
// CHECK:         }

// CHECK-LABEL:   func.func @div(
// CHECK-SAME:                   %[[VAL_0:.*]]: f32,
// CHECK-SAME:                   %[[VAL_1:.*]]: f32) -> f32 {
// CHECK:           %[[VAL_2:.*]] = arith.divf %[[VAL_0]], %[[VAL_1]] : f32
// CHECK:           return %[[VAL_2]] : f32
// CHECK:         }

// CHECK-LABEL:   func.func @minus(
// CHECK-SAME:                     %[[VAL_0:.*]]: f32) -> f32 {
// CHECK:           %[[VAL_1:.*]] = arith.negf %[[VAL_0]] : f32
// CHECK:           return %[[VAL_1]] : f32
// CHECK:         }

