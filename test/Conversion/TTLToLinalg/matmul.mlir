// RUN: ttl-opt --convert-ttl-to-linalg %s | FileCheck %s

func.func @matmul(%arg0: !ttl.tensor<4x3x!ttl.float>, %arg1: !ttl.tensor<3x4x!ttl.float>) -> !ttl.tensor<4x4x!ttl.float> {
  %0 = "ttl.matmul"(%arg0, %arg1) : (!ttl.tensor<4x3x!ttl.float>, !ttl.tensor<3x4x!ttl.float>) -> !ttl.tensor<4x4x!ttl.float>
  "ttl.return"(%0) : (!ttl.tensor<4x4x!ttl.float>) -> ()
}

func.func @matmul_dyn(%arg0: !ttl.tensor<?x?x!ttl.float>, %arg1: !ttl.tensor<?x?x!ttl.float>) -> !ttl.tensor<?x?x!ttl.float> {
  %0 = "ttl.matmul"(%arg0, %arg1) : (!ttl.tensor<?x?x!ttl.float>, !ttl.tensor<?x?x!ttl.float>) -> !ttl.tensor<?x?x!ttl.float>
  "ttl.return"(%0) : (!ttl.tensor<?x?x!ttl.float>) -> ()
}

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @matmul(
// CHECK-SAME:                      %[[VAL_0:.*]]: !ttl.tensor<4x3x!ttl.float>,
// CHECK-SAME:                      %[[VAL_1:.*]]: !ttl.tensor<3x4x!ttl.float>) -> !ttl.tensor<4x4x!ttl.float> {
// CHECK:           %[[VAL_2:.*]] = builtin.unrealized_conversion_cast %[[VAL_1]] : !ttl.tensor<3x4x!ttl.float> to tensor<3x4xf32>
// CHECK:           %[[VAL_3:.*]] = builtin.unrealized_conversion_cast %[[VAL_0]] : !ttl.tensor<4x3x!ttl.float> to tensor<4x3xf32>
// CHECK:           %[[VAL_4:.*]] = tensor.empty() : tensor<4x4xf32>
// CHECK:           %[[VAL_5:.*]] = linalg.matmul ins(%[[VAL_3]], %[[VAL_2]] : tensor<4x3xf32>, tensor<3x4xf32>) outs(%[[VAL_4]] : tensor<4x4xf32>) -> tensor<4x4xf32>
// CHECK:           %[[VAL_6:.*]] = builtin.unrealized_conversion_cast %[[VAL_5]] : tensor<4x4xf32> to !ttl.tensor<4x4x!ttl.float>
// CHECK:           "ttl.return"(%[[VAL_6]]) : (!ttl.tensor<4x4x!ttl.float>) -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @matmul_dyn(
// CHECK-SAME:                          %[[VAL_0:.*]]: !ttl.tensor<?x?x!ttl.float>,
// CHECK-SAME:                          %[[VAL_1:.*]]: !ttl.tensor<?x?x!ttl.float>) -> !ttl.tensor<?x?x!ttl.float> {
// CHECK:           %[[VAL_2:.*]] = builtin.unrealized_conversion_cast %[[VAL_1]] : !ttl.tensor<?x?x!ttl.float> to tensor<?x?xf32>
// CHECK:           %[[VAL_3:.*]] = builtin.unrealized_conversion_cast %[[VAL_0]] : !ttl.tensor<?x?x!ttl.float> to tensor<?x?xf32>
// CHECK:           %[[VAL_4:.*]] = index.constant 0
// CHECK:           %[[VAL_5:.*]] = tensor.dim %[[VAL_3]], %[[VAL_4]] : tensor<?x?xf32>
// CHECK:           %[[VAL_6:.*]] = index.constant 1
// CHECK:           %[[VAL_7:.*]] = tensor.dim %[[VAL_2]], %[[VAL_6]] : tensor<?x?xf32>
// CHECK:           %[[VAL_8:.*]] = tensor.empty(%[[VAL_5]], %[[VAL_7]]) : tensor<?x?xf32>
// CHECK:           %[[VAL_9:.*]] = linalg.matmul ins(%[[VAL_3]], %[[VAL_2]] : tensor<?x?xf32>, tensor<?x?xf32>) outs(%[[VAL_8]] : tensor<?x?xf32>) -> tensor<?x?xf32>
// CHECK:           %[[VAL_10:.*]] = builtin.unrealized_conversion_cast %[[VAL_9]] : tensor<?x?xf32> to !ttl.tensor<?x?x!ttl.float>
// CHECK:           "ttl.return"(%[[VAL_10]]) : (!ttl.tensor<?x?x!ttl.float>) -> ()
// CHECK:         }

