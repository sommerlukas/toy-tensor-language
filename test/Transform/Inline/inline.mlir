// RUN: ttl-opt --inline %s | FileCheck %s
module {
  func.func @callee(%arg0: !ttl.int, %arg1: !ttl.int, %arg2: !ttl.int, %arg3: !ttl.int) -> !ttl.float {
    %0 = "ttl.tensor_empty"() : () -> !ttl.tensor<8x8x!ttl.float>
    %1 = "ttl.tensor_empty"() : () -> !ttl.tensor<8x!ttl.float>
    %2 = "ttl.const_float"() <{constVal = 5.000000e+00 : f32}> : () -> !ttl.float
    %3 = "ttl.const_float"() <{constVal = 6.000000e+00 : f32}> : () -> !ttl.float
    %4 = "ttl.const_float"() <{constVal = 8.000000e+00 : f32}> : () -> !ttl.float
    %5 = "ttl.const_float"() <{constVal = 1.000000e+00 : f32}> : () -> !ttl.float
    %6 = ttl.const_int 0
    %7 = ttl.const_int 0
    %8 = ttl.const_int 1
    %9:5 = "ttl.for"(%arg1, %arg2, %8, %2, %3, %4, %0, %1) ({
    ^bb0(%arg4: !ttl.int, %arg5: !ttl.float, %arg6: !ttl.float, %arg7: !ttl.float, %arg8: !ttl.tensor<8x8x!ttl.float>, %arg9: !ttl.tensor<8x!ttl.float>):
      %23 = "ttl.const_float"() <{constVal = 8.000000e+00 : f32}> : () -> !ttl.float
      %24 = "ttl.const_float"() <{constVal = 7.000000e+00 : f32}> : () -> !ttl.float
      %25 = ttl.const_int 0
      %26 = ttl.const_int 2
      %27:2 = "ttl.for"(%25, %arg3, %26, %arg7, %arg8) ({
      ^bb0(%arg10: !ttl.int, %arg11: !ttl.float, %arg12: !ttl.tensor<8x8x!ttl.float>):
        %29 = ttl.if %arg0 : (!ttl.int) -> !ttl.float {
          %31 = "ttl.const_float"() <{constVal = 4.200000e+01 : f32}> : () -> !ttl.float
          "ttl.yield"(%31) : (!ttl.float) -> ()
        } else {
          "ttl.yield"(%arg11) : (!ttl.float) -> ()
        }
        %30 = "ttl.tensor_insert"(%arg12, %23, %arg4, %arg10) : (!ttl.tensor<8x8x!ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<8x8x!ttl.float>
        "ttl.yield"(%29, %30) : (!ttl.float, !ttl.tensor<8x8x!ttl.float>) -> ()
      }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.float, !ttl.tensor<8x8x!ttl.float>) -> (!ttl.float, !ttl.tensor<8x8x!ttl.float>)
      %28 = "ttl.tensor_insert"(%arg9, %24, %arg4) : (!ttl.tensor<8x!ttl.float>, !ttl.float, !ttl.int) -> !ttl.tensor<8x!ttl.float>
      "ttl.yield"(%23, %24, %27#0, %27#1, %28) : (!ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8x!ttl.float>, !ttl.tensor<8x!ttl.float>) -> ()
    }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8x!ttl.float>, !ttl.tensor<8x!ttl.float>) -> (!ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8x!ttl.float>, !ttl.tensor<8x!ttl.float>)
    %10 = ttl.const_int 0
    %11 = ttl.const_int 1
    %12 = ttl.const_int 1
    %13 = ttl.const_int 1
    %14 = "ttl.slice"(%9#3, %10, %12, %11, %13) : (!ttl.tensor<8x8x!ttl.float>, !ttl.int, !ttl.int, !ttl.int, !ttl.int) -> !ttl.float
    %15 = ttl.const_int 2
    %16 = ttl.const_int 1
    %17 = "ttl.slice"(%9#4, %15, %16) : (!ttl.tensor<8x!ttl.float>, !ttl.int, !ttl.int) -> !ttl.float
    %18 = "ttl.mul"(%14, %17) : (!ttl.float, !ttl.float) -> !ttl.float
    %19 = "ttl.mul"(%18, %9#0) : (!ttl.float, !ttl.float) -> !ttl.float
    %20 = "ttl.mul"(%19, %9#1) : (!ttl.float, !ttl.float) -> !ttl.float
    %21 = "ttl.mul"(%20, %9#2) : (!ttl.float, !ttl.float) -> !ttl.float
    %22 = "ttl.mul"(%21, %5) : (!ttl.float, !ttl.float) -> !ttl.float
    "ttl.return"(%22) : (!ttl.float) -> ()
  }
  func.func @caller() -> !ttl.float {
    %0 = ttl.const_int 1
    %1 = ttl.const_int 5
    %2 = ttl.const_int 10
    %3 = ttl.const_int 25
    %4 = call @callee(%0, %1, %2, %3) : (!ttl.int, !ttl.int, !ttl.int, !ttl.int) -> !ttl.float
    "ttl.return"(%4) : (!ttl.float) -> ()
  }
}

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @callee(

// CHECK-LABEL:   func.func @caller() -> !ttl.float {
// CHECK:           %[[VAL_0:.*]] = ttl.const_int 1
// CHECK:           %[[VAL_1:.*]] = ttl.const_int 5
// CHECK:           %[[VAL_2:.*]] = ttl.const_int 10
// CHECK:           %[[VAL_3:.*]] = ttl.const_int 25
// CHECK:           %[[VAL_4:.*]] = "ttl.const_float"() <{constVal = 4.200000e+01 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_5:.*]] = ttl.const_int 2
// CHECK:           %[[VAL_6:.*]] = "ttl.const_float"() <{constVal = 7.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_7:.*]] = ttl.const_int 0
// CHECK:           %[[VAL_8:.*]] = "ttl.const_float"() <{constVal = 1.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_9:.*]] = "ttl.const_float"() <{constVal = 8.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_10:.*]] = "ttl.const_float"() <{constVal = 6.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_11:.*]] = "ttl.const_float"() <{constVal = 5.000000e+00 : f32}> : () -> !ttl.float
// CHECK:           %[[VAL_12:.*]] = "ttl.tensor_empty"() : () -> !ttl.tensor<8x8x!ttl.float>
// CHECK:           %[[VAL_13:.*]] = "ttl.tensor_empty"() : () -> !ttl.tensor<8x!ttl.float>
// CHECK:           %[[VAL_14:.*]]:5 = "ttl.for"(%[[VAL_1]], %[[VAL_2]], %[[VAL_0]], %[[VAL_11]], %[[VAL_10]], %[[VAL_9]], %[[VAL_12]], %[[VAL_13]]) ({
// CHECK:           ^bb0(%[[VAL_15:.*]]: !ttl.int, %[[VAL_16:.*]]: !ttl.float, %[[VAL_17:.*]]: !ttl.float, %[[VAL_18:.*]]: !ttl.float, %[[VAL_19:.*]]: !ttl.tensor<8x8x!ttl.float>, %[[VAL_20:.*]]: !ttl.tensor<8x!ttl.float>):
// CHECK:             %[[VAL_21:.*]]:2 = "ttl.for"(%[[VAL_7]], %[[VAL_3]], %[[VAL_5]], %[[VAL_18]], %[[VAL_19]]) ({
// CHECK:             ^bb0(%[[VAL_22:.*]]: !ttl.int, %[[VAL_23:.*]]: !ttl.float, %[[VAL_24:.*]]: !ttl.tensor<8x8x!ttl.float>):
// CHECK:               %[[VAL_25:.*]] = ttl.if %[[VAL_0]] : (!ttl.int) -> !ttl.float {
// CHECK:                 "ttl.yield"(%[[VAL_4]]) : (!ttl.float) -> ()
// CHECK:               } else {
// CHECK:                 "ttl.yield"(%[[VAL_23]]) : (!ttl.float) -> ()
// CHECK:               }
// CHECK:               %[[VAL_26:.*]] = "ttl.tensor_insert"(%[[VAL_24]], %[[VAL_9]], %[[VAL_15]], %[[VAL_22]]) : (!ttl.tensor<8x8x!ttl.float>, !ttl.float, !ttl.int, !ttl.int) -> !ttl.tensor<8x8x!ttl.float>
// CHECK:               "ttl.yield"(%[[VAL_25]], %[[VAL_26]]) : (!ttl.float, !ttl.tensor<8x8x!ttl.float>) -> ()
// CHECK:             }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.float, !ttl.tensor<8x8x!ttl.float>) -> (!ttl.float, !ttl.tensor<8x8x!ttl.float>)
// CHECK:             %[[VAL_27:.*]] = "ttl.tensor_insert"(%[[VAL_20]], %[[VAL_6]], %[[VAL_15]]) : (!ttl.tensor<8x!ttl.float>, !ttl.float, !ttl.int) -> !ttl.tensor<8x!ttl.float>
// CHECK:             "ttl.yield"(%[[VAL_9]], %[[VAL_6]], %[[VAL_28:.*]]#0, %[[VAL_28]]#1, %[[VAL_27]]) : (!ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8x!ttl.float>, !ttl.tensor<8x!ttl.float>) -> ()
// CHECK:           }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8x!ttl.float>, !ttl.tensor<8x!ttl.float>) -> (!ttl.float, !ttl.float, !ttl.float, !ttl.tensor<8x8x!ttl.float>, !ttl.tensor<8x!ttl.float>)
// CHECK:           %[[VAL_29:.*]] = "ttl.slice"(%[[VAL_30:.*]]#3, %[[VAL_7]], %[[VAL_0]], %[[VAL_0]], %[[VAL_0]]) : (!ttl.tensor<8x8x!ttl.float>, !ttl.int, !ttl.int, !ttl.int, !ttl.int) -> !ttl.float
// CHECK:           %[[VAL_31:.*]] = "ttl.slice"(%[[VAL_30]]#4, %[[VAL_5]], %[[VAL_0]]) : (!ttl.tensor<8x!ttl.float>, !ttl.int, !ttl.int) -> !ttl.float
// CHECK:           %[[VAL_32:.*]] = "ttl.mul"(%[[VAL_29]], %[[VAL_31]]) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_33:.*]] = "ttl.mul"(%[[VAL_32]], %[[VAL_30]]#0) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_34:.*]] = "ttl.mul"(%[[VAL_33]], %[[VAL_30]]#1) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_35:.*]] = "ttl.mul"(%[[VAL_34]], %[[VAL_30]]#2) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           %[[VAL_36:.*]] = "ttl.mul"(%[[VAL_35]], %[[VAL_8]]) : (!ttl.float, !ttl.float) -> !ttl.float
// CHECK:           "ttl.return"(%[[VAL_36]]) : (!ttl.float) -> ()
// CHECK:         }

