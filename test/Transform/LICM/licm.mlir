// RUN: ttl-opt --loop-invariant-code-motion %s | FileCheck %s

module {
  func.func @control_flow_if(%arg0: !ttl.int, %arg1: !ttl.int, %arg2: !ttl.int, %arg3: !ttl.int) -> !ttl.int {
    %0 = ttl.const_int 5
    %1 = ttl.const_int 17
    %2 = ttl.const_int 0
    %3 = ttl.const_int 0
    %4 = ttl.const_int 0
    %5 = ttl.const_int 1
    %6:2 = "ttl.for"(%arg1, %arg2, %5, %4, %3) ({
    ^bb0(%arg4: !ttl.int, %arg5: !ttl.int, %arg6: !ttl.int):
      %8 = "ttl.and"(%0, %1) : (!ttl.int, !ttl.int) -> !ttl.int
      %9 = "ttl.or"(%8, %arg1) : (!ttl.int, !ttl.int) -> !ttl.int
      %10 = "ttl.add"(%arg6, %arg4) : (!ttl.int, !ttl.int) -> !ttl.int
      "ttl.yield"(%9, %10) : (!ttl.int, !ttl.int) -> ()
    }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.int, !ttl.int) -> (!ttl.int, !ttl.int)
    %7 = "ttl.add"(%6#1, %6#0) : (!ttl.int, !ttl.int) -> !ttl.int
    "ttl.return"(%7) : (!ttl.int) -> ()
  }
}

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   func.func @control_flow_if(
// CHECK-SAME:      %[[VAL_0:.*]]: !ttl.int, %[[VAL_1:.*]]: !ttl.int, %[[VAL_2:.*]]: !ttl.int,
// CHECK-SAME:      %[[VAL_3:.*]]: !ttl.int) -> !ttl.int {
// CHECK:           %[[VAL_4:.*]] = ttl.const_int 5
// CHECK:           %[[VAL_5:.*]] = ttl.const_int 17
// CHECK:           %[[VAL_6:.*]] = ttl.const_int 0
// CHECK:           %[[VAL_7:.*]] = ttl.const_int 0
// CHECK:           %[[VAL_8:.*]] = ttl.const_int 0
// CHECK:           %[[VAL_9:.*]] = ttl.const_int 1
// CHECK:           %[[VAL_10:.*]] = "ttl.and"(%[[VAL_4]], %[[VAL_5]]) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           %[[VAL_11:.*]] = "ttl.or"(%[[VAL_10]], %[[VAL_1]]) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           %[[VAL_12:.*]]:2 = "ttl.for"(%[[VAL_1]], %[[VAL_2]], %[[VAL_9]], %[[VAL_8]], %[[VAL_7]]) ({
// CHECK:           ^bb0(%[[VAL_13:.*]]: !ttl.int, %[[VAL_14:.*]]: !ttl.int, %[[VAL_15:.*]]: !ttl.int):
// CHECK:             %[[VAL_16:.*]] = "ttl.add"(%[[VAL_15]], %[[VAL_13]]) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:             "ttl.yield"(%[[VAL_11]], %[[VAL_16]]) : (!ttl.int, !ttl.int) -> ()
// CHECK:           }) : (!ttl.int, !ttl.int, !ttl.int, !ttl.int, !ttl.int) -> (!ttl.int, !ttl.int)
// CHECK:           %[[VAL_17:.*]] = "ttl.add"(%[[VAL_18:.*]]#1, %[[VAL_18]]#0) : (!ttl.int, !ttl.int) -> !ttl.int
// CHECK:           "ttl.return"(%[[VAL_17]]) : (!ttl.int) -> ()
// CHECK:         }

